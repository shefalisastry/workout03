install.packages("knitr")
install.packages(c("ggplot2", "knitr"))
install.packages("ggplot2")
install.packages("testthat")
knitr::opts_chunk$set(echo = TRUE)
install.packages(ggplot2)
library(ggplot2)
check_prob <- function(prob) {
if (prob > 1 | prob < 0) {
stop('p has to be a number betwen 0 and 1')
}
else {
return(TRUE)
}
}
check_trials <- function(trials){
if (trials <0) {
stop('invalid trials value')
} else {
return(TRUE)
}
}
check_success <- function(success, trials){
if(is.vector(success) == TRUE & sum(success <= trials) == length(success))
return(TRUE)
else
stop('invalid success value')
}
aux_mean <- function(trials,prob) {
multiply_trials_prob <- trials*prob
return(multiply_trials_prob)
}
aux_variance <- function(trials,prob) {
variance_trials_prob <- trials*prob*(1-prob)
return(variance_trials_prob)
}
aux_variance(10, 0.3)
#note to self: understand difference between floor and ceiling properly
aux_mode <- function(trials,prob) {
mode_trials_prob <- floor(trials*prob + prob)
return(mode_trials_prob)
}
aux_mode(10, 0.3)
aux_skewness <- function(trials,prob) {
skewness_trials_prob <- (1-(2*prob))/(sqrt(trials*prob*(1-prob)))
return(skewness_trials_prob)
}
aux_skewness(10, 0.3)
aux_kurtosis <- function(trials,prob) {
kurtosis_trials_prob <- ((1-6*prob)*(1-prob))/((trials*prob))*(1-prob)
return(kurtosis_trials_prob)
}
aux_kurtosis(10, 0.3)
#ROXYGEN
bin_choose <- function(n, k){
if (k > n)
stop('k cannot be greater than n')
else
return(factorial(n)/(factorial(k)*factorial(n-k)))
}
bin_choose(n = 5, k = 2)
bin_probability <- function(success, trials, prob) {
check_trials(trials)
check_prob(prob)
check_success(success, trials)
return(bin_choose(trials, success)*(prob^(success))*((1-prob)^(trials-(success))))
}
bin_probability(success = 2, trials = 5, prob = 0.5)
bin_probability(success = 0:2, trials = 5, prob = 0.5)
#ROXYGEN
#should be in an R script
bin_distribution <- function(trials, prob) {
data1 <- data.frame(success = 0:trials, probability = bin_probability(0:trials, trials, prob))
class(data1) = c('bindis', 'data.frame')
return(data1)
}
bin_distribution(trials = 5, prob = 0.5)
plot.bindis <- function(yes){
barplot(yes$probability, names.arg = yes$success)
}
dis1 <- bin_distribution(trials = 5, prob = 0.5)
plot(dis1)
# note to self: need to name vector
bin_cumulative <- function(trials, prob){
success = 0:trials
data2 <- data.frame(success,
probability = bin_probability(success, trials, prob),
cumulative = cumsum(bin_probability(success, trials, prob)))
class(data2) = c('bincum', 'data.frame')
return(data2)
}
bin_cumulative(trials = 5, prob = 0.5)
plot.bincum <- function(cum1){
plot(cum1$success, cum1$cumulative, type = "o")
lines(cum1$success, cum1$cumulative)
}
dis2 <- bin_cumulative(trials = 5, prob = 0.5)
plot(dis2)
bin_variable <- function(trials, prob){
check_trials(trials)
check_prob(prob)
result <- list("trials" = trials, "prob" = prob)
class(result) = c('binvar')
return(result)
}
bin_variable(3, .5)
print.binvar <- function(x){
cat('"Binomial Variable"\n\n')
cat("Parameters\n", append = TRUE)
cat("-number of trials:", x$trials, append = TRUE)
cat("\n-probability:", x$prob, append = TRUE)
}
bin1 <- bin_variable(trials = 10, p = 0.3)
bin1
summary.binvar <- function(x){
cat('"Binomial Variable"\n\n')
cat("Parameters\n\n", append = TRUE)
cat("-number of trials:", x$trials, append = TRUE)
cat("\n\n-probability:", x$prob, append = TRUE)
cat("\n\n-mean:", aux_mean(x$trials, x$prob), append = TRUE)
cat("\n\n-variance:", aux_variance(x$trials, x$prob), append = TRUE)
cat("\n\n-mode:", aux_mode(x$trials, x$prob), append = TRUE)
cat("\n\n-skewness:", aux_skewness(x$trials, x$prob), append = TRUE)
cat("\n\n-kurtosis:", aux_kurtosis(x$trials, x$prob), append = TRUE)
}
bin1 <- bin_variable(trials = 10, p = 0.3)
binsum1 <- summary(bin1)
binsum1
print.summary.binvar <- function(x){
cat('"Summary Binomial"\n\n')
cat("Parameters\n", append = TRUE)
cat("-number of trials:", x$trials, append = TRUE)
cat("\n-prob of success:", x$prob, append = TRUE)
cat('\n\n"Measures"')
cat("\n-mean:", aux_mean(x$trials, x$prob), append = TRUE)
cat("\n-variance:", aux_variance(x$trials, x$prob), append = TRUE)
cat("\n-mode:", aux_mode(x$trials, x$prob), append = TRUE)
cat("\n-skewness:", aux_skewness(x$trials, x$prob), append = TRUE)
cat("\n-kurtosis:", aux_kurtosis(x$trials, x$prob), append = TRUE)
}
bin1 <- bin_variable(trials = 10, p = 0.3)
binsum1 <- summary(bin1)
binsum1
#next page
#use cat function to make graphs look nice
# do asterisk thing at the beginning
#put everything in R file
##control shift B to build the package which runs all functions and creates package
library(ggplot2)
check_prob <- function(prob) {
if (prob > 1 | prob < 0) {
stop('p has to be a number betwen 0 and 1')
}
else {
return(TRUE)
}
}
library(testthat)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
library(testthat)
library(testthat)
devtools::check()
devtools::document()
setwd("~/binomial/vignettes")
devtools::document()
devtools::document()
devtools::check_man()
devtools::test()
devtools::build_vignettes()
devtools::build()
devtools::install()
devtools::check()
library(testthat)
library(binomial)
bin_probability(3,5,0.4)
# 1.8) Functions of measures
bin_mean <- function(trials, prob){
check_trials(trials)
check_prob(prob)
return(aux_mean(trials, prob))
}
bin_mean(10, 0.3)
bin_mean <- function(trials, prob){
check_trials(trials)
check_prob(prob)
return(aux_mean(trials, prob))
}
bin_mean(10, 0.3)
bin_variance <- function(trials, prob){
check_trials(trials)
check_prob(prob)
return(aux_variance(trials, prob))
}
bin_mode <- function(trials, prob){
check_trials(trials)
check_prob(prob)
return(aux_mode(trials, prob))
}
bin_skewness <- function(trials, prob){
check_trials(trials)
check_prob(prob)
return(aux_skewness(trials, prob))
}
bin_kurtosis <- function(trials, prob){
check_trials(trials)
check_prob(prob)
return(aux_kurtosis(trials, prob))
}
bin_kurtosis(10, 0.3)
bin_skewness(10, 0.3)
bin_kurtosis(10, 0.3)
bin_kurtosis(10, 0.3)
devtools::document()
warnings()
devtools::document()
devtools::document()
devtools::install()
devtools::document()
#' @title bin choose function
#' @description Calculates the number of combinations in which k successes can occur in n trials
#' @param n number of trials
#' @param k number of successes
#' @return vector of tosses
#' @export
#' @examples bin_choose(n = 5, k = 2)
bin_choose <- function(n, k){
if (k > n)
stop('k cannot be greater than n')
else
return(factorial(n)/(factorial(k)*factorial(n-k)))
}
devtools::document()
devtools::document()
devtools::check_man()
devtools::test()
devtools::document()
devtools::check_man()
devtools::test()
devtools::document()
devtools::check_man()
